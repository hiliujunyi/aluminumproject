/*
 * Copyright 2012 Aluminum project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'eclipse'

File uiPreferences = project.file('.settings/org.eclipse.jdt.ui.prefs')

cleanEclipseJdt {
	delete uiPreferences
}

eclipseJdt << {
	Writer templatePreferencesWriter = new StringWriter()

	new groovy.xml.MarkupBuilder(templatePreferencesWriter).templates {
		getTemplates().each {String name, String contents ->
			template(
				autoinsert: true,
				deleted: false,
				enabled: true,

				id: "org.eclipse.jdt.ui.text.codetemplates.${name}",
				name: name,
				context: "${name}_context",
				description: "The '${name}' template.",

				contents
			)
		}
	}

	Properties preferences = new Properties()
	preferences.setProperty('eclipse.prefs.version', '1')
	preferences.setProperty('org.eclipse.jdt.ui.javadoc', 'true')
	preferences.setProperty('org.eclipse.jdt.ui.text.custom_code_templates', templatePreferencesWriter.toString())
	preferences.store(new FileWriter(uiPreferences), null)
}

private Map<String, String> getTemplates() {
	[
		filecomment: '''\
			/*
			 * Copyright ${year} Aluminum project
			 *
			 * Licensed under the Apache License, Version 2.0 (the "License");
			 * you may not use this file except in compliance with the License.
			 * You may obtain a copy of the License at
			 *
			 * http://www.apache.org/licenses/LICENSE-2.0
			 *
			 * Unless required by applicable law or agreed to in writing, software
			 * distributed under the License is distributed on an "AS IS" BASIS,
			 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			 * See the License for the specific language governing permissions and
			 * limitations under the License.
			 */'''.stripIndent(),
		gettercomment: '''\
			/**
			 * @return
			 */'''.stripIndent(),
		settercomment: '''\
			/**
			 * @param ${param}
			 */'''.stripIndent(),
		constructorcomment: '''\
			/**
			 * ${tags}
			 */'''.stripIndent(),
		typecomment: '''\
			/**
			 * ${tags}
			 */'''.stripIndent(),
		fieldcomment: '',
		methodcomment: '''\
			/**
			 * ${tags}
			 */'''.stripIndent(),
		overridecomment: '',
		delegatecomment: '',

		newtype: '''\
			${filecomment}
			${package_declaration}

			${typecomment}
			${type_declaration}'''.stripIndent(),
		classbody: '',
		interfacebody: '',
		enumbody: '',
		annotationbody: '',
		methodbody: '${body_statement}',
		constructorbody: '${body_statement}',
		getterbody: 'return ${field};',
		setterbody: '${field} = ${param};',
		catchblock: ''
	]
}