# Copyright 2010-2011 Levi Hoogenberg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Core library
description: Contains actions and functions that are needed by almost any template.

block.description: Stores its body (a block), so that it can be used later (by the block contents action). Blocks are \
                   context-specific and need to have a unique name within a context.
block.name.description: The name to use for the block.

block_contents.description: Invokes a named body that was stored by a block action. If no block can be found with the \
                            given name, then the body of the action itself will be invoked.
block_contents.name.description: The name of the block to use.

convert.description: Converts a value and writes it to the writer.
convert.value.description: The value to convert.
convert.type.description: The type to convert the value into.

each.description: Iterates over an iterable, invoking its body for each element. The body is invoked in its own scope; \
                  the current element and information about the current loop will be available in that scope.
each.elements.description: The elements to iterate over.
each.element_name.description: The variable name to use for the current element; defaults to 'element'.
each.information_name.description: The variable name to use for information about the current loop; 'loop' by default.

if.description: Invokes its body if the value of its parameter is true.
if.condition.description: The condition that determines whether or not the action body will be invoked.

include.description: Includes a template. It's possible to pass both context variables (as dynamic parameters) and \
                     blocks (using nested block actions) to the included template.
include.name.description: The name of the template to include.
include.parser.description: The name of the parser to use; defaults to the parser that was used for the current \
                            template.
include.inherit_ancestors.description: Whether the included template should inherit the template elements that \
                                       surround the include action or not; false by default.

include_local.description: Includes a local template. It's possible to pass both context variables (as dynamic \
                           parameters) and blocks (using nested block actions) to the included template.
include_local.name.description: The name of the context variable that contains the local template.
include_local.inherit_ancestors.description: Whether the included template should inherit the template elements that \
                                             surround the include action or not; false by default.

remove_variable.description: Removes a context variable.
remove_variable.scope.description: The scope to remove the variable from; defaults to the innermost scope.
remove_variable.name.description: The name of the variable to remove.

repeat.description: Invokes its body a number of times. The body is invoked in its own scope; information about the \
                    current loop will be available in that scope.
repeat.count.description: The number of times to repeat the body.
repeat.information_name.description: The variable name to use for information about the current loop; 'loop' by default.

scope.description: Introduces a new scope and invokes its body in it.
scope.name.description: The name to use for the scope; defaults to a name starting with 'block'.

set_variable.description: Adds or replaces a context variable.
set_variable.scope.description: The scope to set the variable in; defaults to the innermost scope.
set_variable.name.description: The name of the variable to set.
set_variable.value.description: The value of the variable to set; if it is omitted, the body contents will be used as \
                                value.

template.description: Either invokes its body or, when the name parameter is given, stores it, so that it can be used \
                      later.
template.name.description: The name to store the template in.

unless.description: Invokes its body unless the value of its parameter is true.
unless.condition.description: The condition that determines whether or not the action body will be invoked.

write.description: Writes a value to the writer.
write.value.description: The value to write; if it is omitted, the body contents will be written.

if.contribution_description: Executes an action if the value of its parameter is true.

unless.contribution_description: Executes an action unless the value of its parameter is true.

variable_name.description: Sets a context variable with the action contribution's parameter value as its name and the \
                           result of the action it contributes to as its value.

variable_scope.description: Used to specify the scope of a context variable that is captured using the variable name \
                            action contribution.

with_writer.description: Specifies the writer that has to be used for an action.