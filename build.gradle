/*
 * Copyright 2009-2014 Aluminum project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {
	group = 'com.googlecode.aluminumproject'
	version = '0.9'
}

subprojects {
	apply plugin: 'java'

	sourceCompatibility = 1.5
	targetCompatibility = 1.5

	configurations {
		distribution
		compile.extendsFrom distribution
	}

	repositories {
		mavenCentral()
	}

	if (name != 'aluminum-tests') {
		javadoc {
			options.links 'http://download.oracle.com/javase/6/docs/api/'
		}

		task createSources(type: Zip) {
			classifier = 'src'

			from sourceSets.main.allSource
		}

		assemble.dependsOn createSources

		test.enabled = false
	}

	applyScripts('sub', project)

	rootProject.evaluationDependsOn name
}

task createAluDocs(type: JavaExec, dependsOn: subprojects*.build) {
	main = 'com.googlecode.aluminumproject.cli.commands.aludoc.AluDoc'
	args = ['--location', new File(project.buildDir, 'docs/aludoc').path]

	classpath = project('aluminum-tests').configurations.testRuntime
}

task createApiDocs(type: Javadoc)  {
	destinationDir = new File(project.buildDir, 'docs/api')

	Collection<Project> projects = subprojects.findAll {project -> project.name != 'aluminum-tests'}

	source = projects*.sourceSets*.main*.java
	classpath = files(projects*.configurations*.compile)
	options.links = projects.collectMany {project -> project.javadoc.options.links}.unique().toList()
	excludes = projects.collectMany {project -> project.javadoc.excludes}
}

task createDocs(dependsOn: [createAluDocs, createApiDocs])

task createDistribution(type: Zip, dependsOn: createDocs) {
	destinationDir = new File(rootProject.buildDir, 'distributions')

	baseName = rootProject.name
	version = rootProject.version

	from(rootDir) {
		include 'LICENSE'
		include 'README'
	}

	from(buildDir) {
		include 'docs/**'
	}

	subprojects.each {subproject ->
		from(subproject.distsDir) {
			into 'src'
			include '*-src.zip'
		}

		into('lib') {
			from subproject.libsDir

			from files(subproject.configurations.distribution)

			from(subproject.projectDir) {
				include '*.LICENSE'
				include '*.NOTICE'
			}
		}

		from subproject.file('src/distribution')
	}
}

task clean(type: Delete) {
	delete rootProject.buildDir
}

applyScripts('root', project)

private void applyScripts(String category, Project project) {
	rootProject.file("gradle/${category}").listFiles().sort {File script -> script.name - '.gradle'}.each {File script ->
		apply from: script, to: project
	}
}