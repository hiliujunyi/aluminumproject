/*
 * Copyright 2009-2010 Levi Hoogenberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {
	group = 'com.googlecode.aluminumproject'
	version = '0.5'
}

subprojects {
	usePlugin 'java'
	usePlugin 'eclipse'

	sourceCompatibility = 1.6
	targetCompatibility = 1.6

	configurations {
		distribution
		apiDocs.extendsFrom distribution
		compile.extendsFrom apiDocs
	}

	repositories {
		mavenCentral()

		mavenRepo(urls: 'http://repository.jboss.org/maven2/')
	}

	if (name != 'aluminum-tests') {
		task createSources(type: Zip, visible: false) {
			destinationDir = project.distsDir

			classifier = 'src'

			sourceSets.main.java.srcDirs.each {srcDir ->
				fileSet(dir: srcDir)
			}
		}

		assemble.dependsOn << 'createSources'

		['compileTestJava', 'processTestResources', 'testClasses', 'test'].each {taskName ->
			tasks.findByName(taskName).enabled = false
		}
	}

	rootProject.evaluationDependsOn name
}

task createApiDocs(type: Javadoc, visible: false)  {
	destinationDir = new File(project.buildDir, 'docs/api')

	source subprojects.collect {subproject ->
		subproject.sourceSets.main.java
	}
	classpath = files(subprojects.collect {subproject ->
		subproject.configurations.apiDocs.resolve()
	})

	options.links = ['http://java.sun.com/javase/6/docs/api/']

	subprojects.each {subproject ->
		if (subproject.hasProperty('apiDocUrls')) {
			options.links += subproject.property('apiDocUrls')
		}
	}

	optionsFile = file('build/javadoc-options') // see GRADLE-686
}

task createDistribution(type: Zip, dependsOn: [createApiDocs] + subprojects*.build) {
	destinationDir = new File(rootProject.buildDir, 'distributions')

	baseName = rootProject.name
	version = rootProject.version

	fileSet(dir: rootDir) {
		include 'LICENSE'
		include 'README'
	}

	fileSet(dir: buildDir).include('docs/**')

	subprojects.each {subproject ->
		if (subproject.jar.enabled) {
			zipFileSet(prefix: 'src', dir: subproject.distsDir).include("*-src.zip")
			zipFileSet(prefix: 'lib', dir: subproject.libsDir).include('*.jar')

			subproject.configurations.distribution.resolve().each {library ->
				zipFileSet(prefix: 'lib', dir: library.parentFile.path).include(library.name)
			}

			zipFileSet(prefix: 'lib', dir: subproject.projectDir) {
				include '*.LICENSE'
				include '*.NOTICE'
			}

			File distributionDir = file("${subproject.projectDir}/src/distribution")

			if (distributionDir.exists()) {
				fileSet(dir: distributionDir)
			}
		}
	}
}

task clean(type: Clean) {
	dir = rootProject.buildDir
}

task createWrapper(type: Wrapper) {
	gradleVersion = '0.8'
}